dig.lab = 4))
min_grouped_freq_table <- wnba %>%
group_by(min_categories) %>%
summarize(Freq = n()) %>%
mutate(Percentage = Freq / nrow(wnba) * 100)
min_grouped_freq_table
sum(wnba$Height == 175)
library(ggplot2)
library(readr)
read_csv(wnba.csv)
read_csv("wnba.csv")
wnba <- read_csv("Data/wnba.csv")
library(dplyr)
library(ggplot2)
pos_prop <- wnba %>%
group_by(Pos) %>%
summarize(Prop = n() / nrow(wnba))
pos_prop
ggplot(data = pos_prop,
aes(x = "", y = Prop, fill = Pos)) +
geom_bar(stat = "identity", width = 0.25) +
coord_flip() +
geom_text(aes(label = str_c(round(Prop * 100), "%")),
position = position_stack(vjust = 0.5)) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Player Distribution by Position") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
library(stringr)
install.packages(stringr)
install.packages("stringr")
library(stringr)
ggplot(data = pos_prop,
aes(x = "", y = Prop, fill = Pos)) +
geom_bar(stat = "identity", width = 0.25) +
coord_flip() +
geom_text(aes(label = str_c(round(Prop * 100), "%")),
position = position_stack(vjust = 0.5)) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Player Distribution by Position") +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
ggplot(data = pos_prop,
aes(x = "",
y = Prop,
fill = Pos)) +
geom_bar(stat = "identity") +
coord_polar(theta = "y")
exp_prop <-
wnba %>%
group_by(Exp_ordinal) %>%
summarize(Prop = n() / nrow(wnba))
#histograms
pts_binwidth <- (max(wnba$PTS) - min(wnba$PTS)) / 10
ggplot(data = wnba,
aes(x = PTS)) +
geom_histogram(boundary = min(wnba$PTS),
binwidth = pts_binwidth) +
scale_x_continuous(breaks = seq(0, 600, by = 50))
wnba <- wnba %>%
mutate(games_categories = cut(Games_Played, breaks = 10, dig.lab = 4))
wnba %>%
group_by(games_categories) %>%
summarize(Freq = n())
ggplot(data = wnba,
aes(x = Games_Played)) +
geom_histogram(boundary = min(wnba$Games_Played),
binwidth = games_binwidth) +
scale_x_continuous(breaks = seq(0, 35, by = 5))
games_binwidth <- (max(wnba$Games_Played) - min(wnba$Games_Played)) / 10
ggplot(data = wnba,
aes(x = Games_Played)) +
geom_histogram(boundary = min(wnba$Games_Played),
binwidth = games_binwidth) +
scale_x_continuous(breaks = seq(0, 35, by = 5))
ggplot(data=wnba, aes(x=AST))+
geom_histogram()
ggplot(data=wnba, aes(x=FT_perc))+
geom_histogram()
ggplot(data=wnba, aes(x=FT%))+
geom_histogram()
ggplot(data = wnba,
aes(x = BMI)) +
geom_histogram(bins = 15)
install.packages("survival")
library(readr)
library(dplyr)
library(ggplot2)
library(survival)
MDSCdat <- read_csv("~/Documents/15-C-0160/15C0160 CPI cohort for R/MDSC.csv")
View(MDSCdat)
MDSCdat <- MDSCdat%>%
p_eMDSC_2 <- as.double(MDSCdat$p_eMDSC_2, rm.na=TRUE)
MDSCdat$p_eMDSC_2 <- as.double(MDSCdat$p_eMDSC_2, rm.na=TRUE)
str(MDSCdat)
install.packages("rmarkdown")
install.packages("highr")
seq(2:5.5, by=0.25)
seq(1:5)
seq(3:10)
3:10
wd?
getwd()
library(readr)
library(dplyr)
covid19 <- read_csv("Data/covid19.csv")
nrow(covid19)
ncol(covid19)
head(covid19)
glimpse(covid19)
is.na(covid19)
summary(covid19)
covid_df_all_states <- covid19 %>%
group_by(Province_State) %>%
filter(Province_State = "All States")
covid_df_all_states <- covid19 %>%
group_by(Province_State) %>%
filter(Province_State == "All States")
covid_df_all_states
covid_df <- covid19 %>%
select(-Province_State)
glimpse(covid_df)
covid_df_all_states_daily <- covid_df_all_states %>%
select(Date, Country_Region, active, hospitalizedCurr,
daily_tested, daily_positive)
covid_df_all_states_daily_sum <- covid_df_all_states_daily %>%
group_by(Country_Region) %>%
summarise(tested = sum(daily_tested),
positive = sum(daily_positive)
activesum = sum(active)
hospitalized = sum(hospitalizedCurr)) %>%
arrange(desc(tested))
covid_df_all_states_daily_sum <- covid_df_all_states_daily %>%
group_by(Country_Region) %>%
summarise(tested = sum(daily_tested),
positive = sum(daily_positive),
activesum = sum(active),
hospitalized = sum(hospitalizedCurr)) %>%
arrange(desc(tested))
library(readr)
library(dplyr)
covid19 <- read_csv("Data/covid19.csv")
covid_df_all_states <- covid19 %>%
group_by(Province_State) %>%
filter(Province_State == "All States")
covid_df <- covid19 %>%
select(-Province_State)
covid_df_all_states_daily <- covid_df_all_states %>%
select(Date, Country_Region, active, hospitalizedCurr,
daily_tested, daily_positive)
covid_df_all_states_daily_sum <- covid_df_all_states_daily %>%
group_by(Country_Region) %>%
summarise(tested = sum(daily_tested),
positive = sum(daily_positive),
activesum = sum(active),
hospitalized = sum(hospitalizedCurr)) %>%
arrange(desc(tested))
glimpse(covid_df_all_states_daily_sum)
head(covid_df_all_states_daily_sum, 10)
covid_top_10 <- head(covid_df_all_states_daily_sum, 10)
countries <- covid_top_10$Country_Region
tested_cases <- covid_top_10$tested
positive_cases <- covid_top_10$positive
active_cases <- covid_top_10$activesum
hospitalized_cases <- covid_top_10$hospitalized
names(tested_cases) <- countries
names(positive_cases) <- countries
names(active_cases) <- countries
names(hospitalized_cases) <- countries
positive_cases/tested_cases
positive_tested_top_3 <- positive_cases[7,1,5]
ratio <- positive_cases/tested_cases
positive_tested_top_3 <- ratio[c(7,1,5)]
positive_tested_top_3
united_kingdom <- c(0.11, 1473672, 166909, 0, 0)
united_states <- c(0.10, 17282363, 1877179, 0, 0)
turkey <- c(0.08, 2031192, 163941, 2980960, 0)
covid_mat <- rbind(united_kingdom, united_states, turkey)
colnames(covid_mat) <- c("Ratio", "tested", "positive", "active", "hospitalized")
covid_mat
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = positive_tested_top_3)
df <- c(covid_df, covid_df_all_states, covid_df_all_states_daily,covid_top_10)
mat <- c(covid_mat)
vectors <- c(vector_col, countries)
data_structure_list <- c(df, mat, vectors)
covid_analysis_list <- c(question, answer, data_structure_list)
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = positive_tested_top_3)
df <- c(covid_df, covid_df_all_states, covid_df_all_states_daily,covid_top_10)
mat <- c(covid_mat)
vectors <- c(vector_col, countries)
vector_col <- c("Ratio", "tested", "positive", "active", "hospitalized")
vectors <- c(vector_col, countries)
data_structure_list <- c(df, mat, vectors)
covid_analysis_list <- c(question, answer, data_structure_list)
data_structure_list
library(dplyr)
glimpse(BookReview2)
knitr::opts_chunk$set(echo = TRUE)
BookReview2 <- read_csv("Data/book_reviews.csv")
BookReview2 <- read_csv("Data/book_reviews.csv")
library(tidyverse)
library(readr)
BookReview2 <- read_csv("Data/book_reviews.csv")
glimpse(BookReview2)
BookReview2 <- read_csv("Data/book_reviews.csv")
glimpse(BookReview2)
unique(BookReview2$review)
BookReview2 <- read_csv("Data/book_reviews.csv")
glimpse(BookReview2)
unique(BookReview2$review)
unique(BookReview2$state)
BookReview2 <- read_csv("Data/book_reviews.csv")
glimpse(BookReview2)
unique(BookReview2$review)
unique(BookReview2$state)
unique(BookReview2$price)
sales2019 <- read_csv("Data/sales2019.csv")
glimpse(sales2019)
#unique(BookReview2$review)
#unique(BookReview2$state)
#unique(BookReview2$price)
unique(sales2019$title)
is.na(sales2019$user_submitted_review)
is.na(sales2019$total_purchased)
is.na(sales2019$customer_type)
unique(sales2019$customer_type)
sales2019 <- sales2019 %>%
filter(!is.na(user_submitted_review))
View(sales2019)
mean(sales2019$total_purchased)
mean(sales2019$total_purchased, na.rm = TRUE)
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(total_purchased=="NA", 4, total_purchased))
View(sales2019)
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(total_purchased=="NA", "4", total_purchased))
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(total_purchased==NA, "4", total_purchased))
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(total_purchased== "NA", 4, total_purchased))
View(sales2019)
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased)=TRUE, 4, total_purchased))
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased=TRUE), 4, total_purchased))
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased==TRUE), 4, total_purchased))
View(sales2019)
unique(sales2019$user_submitted_review)
sales2019 <- sales2019 %>%
mutate(rating=case_when(str_detect(user_submitted_review, "hate" | "not")~ 0,
str_detect(user_submitted_review, "Awesome" | "learn" | "OK"|"okay"
|"better book")~ 2,
str_detect(user_submitted_review, "other books were better")~ 1))
rlang::last_error()
library(stringr)
sales2019 <- sales2019 %>%
mutate(rating=case_when(str_detect(user_submitted_review, "hate" | "not")~ 0,
str_detect(user_submitted_review, "Awesome" | "learn" | "OK"|"okay"
|"better book")~ 2,
str_detect(user_submitted_review, "other books were better")~ 1))
rlang::last_error()
sales2019 <- sales2019 %>%
mutate(rating=case_when(str_detect(user_submitted_review, "hate")~ 0))
?str_detect
sales2019 <- sales2019 %>%
mutate(rating=case_when(str_detect(user_submitted_review, "hate",negate = FALSE)~ 0))
sales2019 <- sales2019 %>%
mutate(rating=case_when(str_detect(user_submitted_review, "hate", negate = FALSE)==TRUE ~ 0))
sales2019 <- sales2019 %>%
mutate(rating=case_when(str_detect(user_submitted_review, "hate", negate = FALSE) ~ "Neg"))
str_detect(sales2019$user_submitted_review, "hate")
str_detect(sales2019$user_submitted_review, "hated")
class(sales2019$user_submitted_review)
Pos_review <- function(user_review){
case_when(str_detect(user_review, "Awesome")~ TRUE,
str_detect(user_review, "learned")~ TRUE,
str_detect(user_review, "okay" | "OK")~ TRUE,
str_detect(user_review, "bbetter book")~ TRUE,
TRUE ~ FALSE)
}
sales2019 <- sales2019 %>%
mutate(review=Pos_review(user_submitted_review))
View(Pos_review)
case_when(str_detect(user_submitted_review, "Awesome")~ TRUE,
str_detect(user_submitted_review, "learned")~ TRUE,
str_detect(user_submitted_review, "okay" | "OK")~ TRUE,
str_detect(user_submitted_review, "bbetter book")~ TRUE,
TRUE ~ FALSE)
Pos_review <- function(review){
case_when(str_detect(user_submitted_review, "Awesome")~ TRUE,
str_detect(user_submitted_review, "learned")~ TRUE,
str_detect(user_submitted_review, "okay" | "OK")~ TRUE,
str_detect(user_submitted_review, "better book")~ TRUE,
TRUE ~ FALSE)
}
PosiReview <- Pos_Review(sales2019$user_submitted_review)
case_when(str_detect(user_submitted_review, "Awesome")~ TRUE,
str_detect(user_submitted_review, "learned")~ TRUE,
str_detect(user_submitted_review, "okay" | "OK")~ TRUE,
str_detect(user_submitted_review, "better book")~ TRUE,
TRUE ~ FALSE)
case_when(str_detect(review, "Awesome")~ TRUE,
str_detect(review, "learned")~ TRUE,
str_detect(review, "okay" | "OK")~ TRUE,
str_detect(review, "better book")~ TRUE,
TRUE ~ FALSE)
review_positive = case_when(str_detect(review, "Awesome")~ TRUE,
str_detect(review, "learned")~ TRUE,
str_detect(review, "okay" | "OK")~ TRUE,
str_detect(review, "better book")~ TRUE,
TRUE ~ FALSE)
sales2019 <- read_csv("Data/sales2019.csv")
glimpse(sales2019)
unique(sales2019$title)
is.na(sales2019$user_submitted_review)
is.na(sales2019$total_purchased)
unique(sales2019$customer_type)
sales2019 <- sales2019 %>%
filter(!is.na(user_submitted_review))
mean(sales2019$total_purchased, na.rm = TRUE)
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased==TRUE), 4, total_purchased))
unique(sales2019$user_submitted_review)
library(stringr)
Pos_review <- function(review){
review_positive = case_when(str_detect(review, "Awesome")~ TRUE,
str_detect(review, "learned")~ TRUE,
str_detect(review, "okay" | "OK")~ TRUE,
str_detect(review, "better book")~ TRUE,
TRUE ~ FALSE
)
}
PosiReview <- Pos_Review(sales2019$user_submitted_review)
PosiReview <- Pos_review(sales2019$user_submitted_review)
review_positive = case_when(str_detect(review, "Awesome")~ TRUE,
str_detect(review, "learned")~ TRUE,
str_detect(review, "okay")~ TRUE,
str_detect(review, "OK")~ TRUE
str_detect(review, "better book")~ TRUE,
review_positive = case_when(str_detect(review, "Awesome")~ TRUE,
str_detect(review, "learned")~ TRUE,
str_detect(review, "okay")~ TRUE,
str_detect(review, "OK")~ TRUE,
str_detect(review, "better book")~ TRUE,
TRUE ~ FALSE
)
review_positive = case_when(str_detect(sales2019$user_submitted_review, "Awesome")~ TRUE,
str_detect(sales2019$user_submitted_review, "learned")~ TRUE,
str_detect(sales2019$user_submitted_review, "okay")~ TRUE,
str_detect(sales2019$user_submitted_review, "OK")~ TRUE,
str_detect(sales2019$user_submitted_review, "better book")~ TRUE,
TRUE ~ FALSE
)
review_positive = case_when(str_detect(review, "Awesome")~ TRUE,
str_detect(review, "learned")~ TRUE,
str_detect(review, "okay")~ TRUE,
str_detect(review, "OK")~ TRUE,
str_detect(, "better book")~ TRUE,
TRUE ~ FALSE
)
sales2019 <- read_csv("Data/sales2019.csv")
glimpse(sales2019)
unique(sales2019$title)
is.na(sales2019$user_submitted_review)
is.na(sales2019$total_purchased)
unique(sales2019$customer_type)
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased==TRUE), 4, total_purchased))
sales2019 <- sales2019 %>%
filter(!is.na(user_submitted_review))
mean(sales2019$total_purchased, na.rm = TRUE)
review_positive = case_when(str_detect(review, "Awesome")~ TRUE,
str_detect(review, "learned")~ TRUE,
str_detect(review, "okay")~ TRUE,
str_detect(review, "OK")~ TRUE,
str_detect(review, "better book")~ TRUE,
TRUE ~ FALSE
)
sales2019 <- sales2019 %>%
mutate(Posi_review=unlist(map(user_submitted_review, Pos_review)))
review_positive = case_when(str_detect(x, "Awesome")~ TRUE,
str_detect(x, "learned")~ TRUE,
str_detect(x, "okay")~ TRUE,
str_detect(x, "OK")~ TRUE,
str_detect(x, "better book")~ TRUE,
TRUE ~ FALSE
)
unique(sales2019$user_submitted_review)
library(stringr)
Pos_review <- function(x){
review_positive = case_when(str_detect(x, "Awesome")~ TRUE,
str_detect(x, "learned")~ TRUE,
str_detect(x, "okay")~ TRUE,
str_detect(x, "OK")~ TRUE,
str_detect(x, "better book")~ TRUE,
TRUE ~ FALSE
)
return()
}
sales2019 <- sales2019 %>%
mutate(Posi_review=unlist(map(user_submitted_review, Pos_review)))
sales2019 <- sales2019 %>%
mutate(Posi_review=unlist(map(user_submitted_review, Pos_review)))
View(sales2019)
sales2019 <- read_csv("Data/sales2019.csv")
sales2019 <- sales2019 %>%
filter(!is.na(user_submitted_review))
mean(sales2019$total_purchased, na.rm = TRUE)
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased==TRUE), 4, total_purchased))
unique(sales2019$user_submitted_review)
library(stringr)
is_positive <- function(review) {
review_positive = case_when(
str_detect(review, "Awesome") ~ TRUE,
str_detect(review, "OK") ~ TRUE,
str_detect(review, "Never") ~ TRUE,
str_detect(review, "a lot") ~ TRUE,
TRUE ~ FALSE # The review did not contain any of the above phrases
)
}
sales2019 <- sales2019 %>%
mutate(
is_positive = unlist(map(user_submitted_review, is_positive))
)
sales2019 <- sales2019 %>%
mutate(Posi_review = unlist(map(user_submitted_review, Pos_review)))
View(is_positive)
View(sales2019)
unique(sales2019$user_submitted_review)
sales2019 <- read_csv("Data/sales2019.csv")
sales2019 <- sales2019 %>%
filter(!is.na(user_submitted_review))
mean(sales2019$total_purchased, na.rm = TRUE)
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased==TRUE), 4, total_purchased))
sales2019 <- sales2019 %>%
mutate(total_purchased2=if_else(is.na(total_purchased==TRUE), 4, total_purchased))
unique(sales2019$user_submitted_review)
library(stringr)
is_positive <- function(review) {
review_positive = case_when(
str_detect(review, "Awesome") ~ TRUE,
str_detect(review, "OK") ~ TRUE,
str_detect(review, "okay") ~ TRUE,
str_detect(review, "Never") ~ TRUE,
str_detect(review, "a lot") ~ TRUE,
TRUE ~ FALSE # The review did not contain any of the above phrases
)
}
sales2019 <- sales2019 %>%
mutate(
is_positive2 = unlist(map(user_submitted_review, is_positive))
)
library(lubridate)
sales2019 <- sales2019 %>%
mutate(date2=mdy(date))
View(sales2019)
sales2019 <- sales2019 %>%
mutate(group=if_else(date2<2019-7-1,1,2)
)
sales2019 <- sales2019 %>%
mutate(group=if_else(date2<2019-07-01,1,2)
)
sales2019 <- sales2019 %>%
mutate(group=if_else(date2 < "2019-07-01",1,2)
)
SummaryByGroup <- sales2019 %>%
group_by(group) %>%
summarise()
SummaryByGroup
SummaryByGroup <- sales2019 %>%
group_by(group) %>%
summarise(TotalBooks=sum(total_purchased2))
SummaryByGroup
SummaryByGroup <- sales2019 %>%
group_by(group) %>%
summarise(TotalBooks=sum(total_purchased2),
customerType=n(customer_type))
sales2019 <- sales2019 %>%
mutate(group=if_else(date2 < "2019-07-01","pre","post")
)
SummaryByGroup <- sales2019 %>%
group_by(group) %>%
summarise(TotalBooks=sum(total_purchased2)
)
SummaryByGroup
CustomerAndDate <- sales2019 %>%
group_by(group, customer_type) %>%
summarise(T_books=sum(total_purchased2))
CustomerAndDate
ReviewSummary <- sales2019 %>%
group_by(group) %>%
summarise(posReview=sum(is_positive2))
ReviewSummary
old.packages()
update.packages()
sessionInfo()
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
